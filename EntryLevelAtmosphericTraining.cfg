 CONTRACT_TYPE
    { //Define Contract Information / Displayed Information
        name = EntryLevelAtmosphericPilotTraining
        title = Kerbal Academy: Entry Level Atmospheric Piloting Course
		group = KerbalAcademy
        description = One of the new recruits, @/trainee , has been selected to take the Entry Level Pilot Training Course to improve their abilities. 
		genericDescription = Pliots must complete the lower level course to improve their skills.
        synopsis = Complete the training course with @/trainee .
        completedMessage = Congratulations @/trainee 
        agent = Kerbal Academy
		notes = The parameters must be completed in order.
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Trivial
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = @/trainingCost
		
		//Find Kerbal 
		DATA
		{ 
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel() <3).Random()
			title = Must have a Pilot below Level 3 available in the roster. 
		}
		
		//Set XP rewards
		DATA
		{
			type = double
			expAward = (@/mentor.ExperienceLevel() - @/trainee.ExperienceLevel())*1.5  
			baseMentorlevel = @/trainee.ExperienceLevel()+1
		}
		
		DATA
		{
			type = List<Kerbal>
			requiredValue = false
			aliveKerbals = AllKerbals().Where(a => a.RosterStatus() == Available || a.RosterStatus() == Assigned)
			mentorList = @aliveKerbals.Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.ExperienceLevel() > @baseMentorlevel)
		}
		
		// Find Mentor
		DATA
		{	
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			mentor = AllKerbals().Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel()>= @baseMentorlevel).Random()
			title = Must have a Pilot at least one level above that of the trainee available in the roster. 
		}
		
		//Set Cost
		DATA
		{ 
			type = double
			trainingCost = -(5000*@expAward) 
		}	
		
		PARAMETER
		{	
			name = Intial Crew Check
			type = HasCrew
			title = Have @/trainee and @/mentor onboard
			kerbal = @/trainee
			kerbal = @/mentor
		}
		
		BEHAVIOUR
		{
			name = WaypointGenerator
			type = WaypointGenerator
			
			PQS_CITY
			{
				name = KSC
				hidden = true
				parameter = Intial Crew Check
				pqsCity = KSC
			}
			
			RANDOM_WAYPOINT_NEAR
			{
				name = Training Course Starting Point
				icon = custom
				altitude = Random(250, 6000)
				minDistance = 5000.0
				maxDistance = 8000.0
				nearIndex = 0
				chained = true
			}
			
			RANDOM_WAYPOINT_NEAR
			{
				name = Training Course 1st Marker
				icon = custom
				parameter = WP1
				altitude = Random(250, 6000)
				minDistance = 5000.0
				maxDistance = 8000.0
				nearIndex = 1
				chained = true
			}
			
			RANDOM_WAYPOINT_NEAR
			{
				name = Training Course 2nd Marker
				icon = custom
				parameter = WP2
				altitude = Random(250, 6000)
				minDistance = 5000.0
				maxDistance = 8000.0
				nearIndex = 2
				chained = true
			}
			
			RANDOM_WAYPOINT_NEAR
			{
				name = Training Course 3rd Marker
				icon = custom
				parameter = WP3
				altitude = Random(250, 6000)
				minDistance = 5000.0
				maxDistance = 8000.0
				nearIndex = 3
				chained = true
			}
			
			RANDOM_WAYPOINT_NEAR
			{
				name = Final Training Course Marker
				icon = custom
				parameter = WP4
				altitude = Random(250, 6000)
				minDistance = 5000.0
				maxDistance = 8000.0
				nearIndex = 4
				chained = true
			}
		}
		
		PARAMETER
		{
			name = Fly Course
			type = All
			title = Successfully Fly Through All Course Markers
			completeInSequence = true
			
			PARAMETER
			{
				name = WP1
				type = VisitWaypoint
				title = Fly Through The First Waypoint
				index = 1
				hideOnCompletion = true
				disableOnStateChange = true
				completeInSequence = true
			}

			PARAMETER
			{
				name = WP2
				type = VisitWaypoint
				title = Fly Through The Second Waypoint
				index = 2
				hideOnCompletion = true
				disableOnStateChange = true
				completeInSequence = true
			}

			PARAMETER
			{
				name = WP3
				type = VisitWaypoint
				title = Fly Through The Third Waypoint
				index = 3
				hideOnCompletion = true
				disableOnStateChange = true
				completeInSequence = true
			}

			PARAMETER
			{
				name = WP4
				type = VisitWaypoint
				title = Fly Through The Forth Waypoint
				index = 4
				hideOnCompletion = true
				disableOnStateChange = true
				completeInSequence = true
			}
			
			PARAMETER
			{
				name = WP5
				type = VisitWaypoint
				title = Fly Through The Final Waypoint
				index = 5
				hideOnCompletion = true
				disableOnStateChange = true
				completeInSequence = true
			}
		}
		
		PARAMETER
		{
			name = landedSafe
			type = All
			title = Land Safely On The KSC Runway
			disableOnStateChange = false
			completeInSequence = true
			
			PARAMETER
			{
				name = onRunway
				type = ReachState
				title = Land
				completeInSequence = true				
				targetBody = HomeWorld()
				biome = Runway
				situation = LANDED
			}
			
			PARAMETER
			{	
				name = finalCrew
				type = HasCrew
				title = Have both @/mentor and @/trainee onboard when you land
				kerbal = @/mentor
				kerbal = @/trainee
			}
		}
		
		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			parameter = landedSafe
			kerbal = @/trainee
			experience = @/expAward
		}
		

	
	}