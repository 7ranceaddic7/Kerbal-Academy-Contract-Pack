 CONTRACT_TYPE
    { //Define Contract Information / Displayed Information
        name = IntermediateOrbitalPilotTraining
        title = Kerbal Academy: Intermediate Level Orbital Maneuvering Course
		group = KerbalAcademy
        description = KSC administration has chosen @trainee to complete an intermediate level orbital maneuver training. They will be working with @mentor, who will provide valuable experience.   
		genericDescription = Have the trainee and mentor land safely after achieving the following orbital parameters.
        synopsis = Complete the training with @/trainee.
        completedMessage = Congratulations @/trainee 
        agent = Kerbal Academy
		notes = The parameters must be completed in order.
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Significant 
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = @/trainingCost
		
		//Find Kerbal 
		DATA
		{ 
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel() >2 &&  m.ExperienceLevel() <=4).Random()
			title = Must have a Pilot above Level 2 and below or at level 4 available in the roster. 
		}
		
		// Decide Reward Multipliers 
		DATA
		{	
			type = double
			currentLevel = @/trainee.ExperienceLevel()
			rewardMultiplier = (@/trainee.ExperienceLevel()*@/mentor.ExperienceLevel())
			costMultiplier = (@currentLevel)*(@rewardMultiplier)
		}
		
		//Set XP rewards
		DATA
		{
			type = double
			expAward = (@/mentor.ExperienceLevel() - @/trainee.ExperienceLevel())*1.25  
			baseMentorlevel = @/trainee.ExperienceLevel()+1. 
		}
		
		DATA
		{
			type = List<Kerbal>
			requiredValue = false
			aliveKerbals = AllKerbals().Where(a => a.RosterStatus() == Available || a.RosterStatus() == Assigned)
			mentorList = @aliveKerbals.Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.ExperienceLevel() > @baseMentorlevel)
		}
		
		// Find Mentor
		DATA
		{	
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			mentor = AllKerbals().Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel()>= @baseMentorlevel).Random()
			title = Must have a Pilot at least one level above that of the trainee available in the roster. 
		}
		
		//Set Cost
		DATA
		{ 
			type = double
			trainingCost = (-1000*((@costMultiplier)*(@expAward)))
		}	
		
		//Define Orbital Margins And Randomize
		DATA
		{
			type = double
			parRandom = Random(1,2)
			errorMulti = @currentLevel < 3 ? 4 : @currentLevel == 3 ? 3 : 2 
			errorAlt = ((@errorMulti)*1000)
			errorInc = ((@errorMulti) / 2)
			altRandom = Random(0,25)  
			incRandom = Random(0,10)
		}
		
		//Define Target Orbit Parameters
		DATA
		{
			type = double
			basicAlt = (75000+((@altRandom)*1000))  
			minAlt = ((@basicAlt)-(@errorAlt))
			maxAlt = ((@basicAlt)+(@errorAlt))
			basicAp = (100000+((@altRandom)*1000))  
			minAp = ((@basicAp)-(@errorAlt))
			maxAp = ((@basicAp)+(@errorAlt))
			basicPe = (100000-((@altRandom)*1000))
			minPe = ((@basicPe)-(@errorAlt))
			maxPe = ((@basicPe)+(@errorAlt))
			basicInc = (0+(@incRandom))
			minInc = ((@basicInc)-(@errorInc))
			maxInc = ((@basicInc)+(@errorInc))
		}
		
		//Parameters
		//Check that everyone is onboard for launch
		PARAMETER
		{
			name = Inital Crew Check
			type = HasCrew
			kerbal = @/trainee
			kerbal = @/mentor
			title = Have @/trainee and @/mentor on board before launch.
			hideChildren = true
			disableOnStateChange = true
			
			//Are you landed tho?
			PARAMETER
			{
				name = Check Prelaunch
				type = ReachState
				hidden = true
				targetBody = HomeWorld()
				situation = PRELAUNCH
				disableOnStateChange = true
			}
		}
		
		//Enter first safe stable orbit
		PARAMETER
		{
			name = Enter Orbit Safely
			type = All
			title = Enter a stable orbit with a periapsis above 75 Km, and hold for 30 Min before continuing.
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit Ap & Pe aboive 75000 meters (75 Km)
			PARAMETER
			{
				name = Enter_Orbit 
				type = Orbit
				title = Enter an orbit with a periapsis above 75 Km.
				disableOnStateChange = false
				targetBody = HomeWorld()
				situation = ORBITING
				minAltitude = 75000
			}
			
			//Wait for 30 min. Assume premission checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit with a periapsis above 75 Km.
				waitingText = Maintain a stable orbit while pre-mission checks are completed.
				completionText = All systems are go for next phase.
				parameter = Enter_Orbit
			}
		}
		
		//Following Parameters For Scenarios, Some Only Used If parRandom is a specific Int.
		//First Parameter Group 
		PARAMETER
		{
			name = Orbit Manuever Practice 1 (Type 1)
			type = All
			title = Enter and maintain An orbit that meets the first set of parameters. 
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit (Scenario 1 Random 1)
			PARAMETER
			{
				name = Enter_First_Practice_Orbit  
				type = All
				title = Achieve Correct Orbital Parameters.
				disableOnStateChange = false
				
				PARAMETER
				{
					name = Periapsis Check  
					type = Orbit
					title = Enter orbit with periapsis of @/basicPe
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minPeA = @/minPe
					maxPeA = @/maxPe
				}
				
				PARAMETER
				{
					name = Inclination Check  
					type = Orbit
					title = Enter orbit with inclination of @/basicInc
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minInclination = @/minInc
					maxInclination = @/maxInc
				}
			}
			
			//Wait for 30 min. Assume pre-mission checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit that meets the requirements
				waitingText = Maintain orbit while checks are completed.
				completionText = All systems are go for next phase.
				parameter = Enter_First_Practice_Orbit
			}
			
			//Requirement That Checks parRandom
			REQUIREMENT
			{
				name = Check For Activation
				type = Expression
				expression = @/parRandom == 1
			}
		}
		
		//Second Parameter Set T1
		PARAMETER
		{
			name = Orbit Manuever Practice 2 (Type 1)
			type = All
			title = Enter and maintain An orbit that meets the second set of parameters. 
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit (Scenario 2 Random 1)
			PARAMETER
			{
				name = Enter_Second_Practice_Orbit  
				type = All
				title = Achieve Correct Orbital Parameters.
				disableOnStateChange = false
				
				PARAMETER
				{
					name = Apoapsis Check  
					type = Orbit
					title = Enter orbit with an apoapsis of @/basicAp
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minApA = @/minAp
					maxApA = @/maxAp
				}
				
				PARAMETER
				{
					name = Inclination Check  
					type = Orbit
					title = Enter orbit with inclination of 0
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minInclination = (180-(@/errorInc))
					maxInclination = (0+(@/errorInc))
				}
			}
			
			//Wait for 30 min. Assume pre-mission checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit that meets the requirements
				waitingText = Maintain orbit while checks are completed.
				completionText = All systems are go for next phase.
				parameter = Enter_Second_Practice_Orbit
			}
			
			//Requirement That Checks parRandom
			REQUIREMENT
			{
				name = Check For Activation
				type = Expression
				expression = @/parRandom == 1
			}
		}
		
		//Second Parameter Group
		PARAMETER
		{
			name = Orbit Manuever Practice 1 (Type 2)
			type = All
			title = Enter and maintain An orbit that meets the first set of parameters. 
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit (Scenario 1 Random 2)
			PARAMETER
			{
				name = Enter_First_Practice_Orbit  
				type = All
				title = Achieve Correct Orbital Parameters.
				disableOnStateChange = false
				
				PARAMETER
				{
					name = Periapsis Check  
					type = Orbit
					title = Enter orbit with periapsis of @/basicPe and apoapsis of @/basicAp
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minPeA = @/minPe
					maxPeA = @/maxPe
					minApA = @/minAp
					maxApA = @/maxAp
				}
				
				PARAMETER
				{
					name = Inclination Check  
					type = Orbit
					title = Enter orbit with inclination of @/basicInc
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minInclination = @/minInc
					maxInclination = @/maxInc
				}
			}
			
			//Wait for 30 min. Assume pre-mission checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit that meets the requirements
				waitingText = Maintain orbit while checks are completed.
				completionText = All systems are go for next phase.
				parameter = Enter_First_Practice_Orbit
			}
			
			//Requirement That Checks parRandom
			REQUIREMENT
			{
				name = Check For Activation
				type = Expression
				expression = @/parRandom == 2
			}
		}
		
		//Second Parameter Set T1
		PARAMETER
		{
			name = Orbit Manuever Practice 2 (Type 2)
			type = All
			title = Enter and maintain An orbit that meets the second set of parameters. 
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit (Scenario 2 Random 2)
			PARAMETER
			{
				name = Enter_Second_Practice_Orbit  
				type = All
				title = Achieve Correct Orbital Parameters.
				disableOnStateChange = false
				
				PARAMETER
				{
					name = Apoapsis Check  
					type = Orbit
					title = Enter orbit with an apoapsis of @/basicAp
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minApA = @/minAp
					maxApA = @/maxAp
				}
				
				PARAMETER
				{
					name = Inclination Check  
					type = Orbit
					title = Enter orbit with inclination of 0
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minInclination = (180-(@/errorInc))
					maxInclination = (0+(@/errorInc))
				}
			}
			
			//Wait for 30 min. Assume pre-mission checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit that meets the requirements
				waitingText = Maintain orbit while checks are completed.
				completionText = All systems are go for next phase.
				parameter = Enter_Second_Practice_Orbit
			}
			
			//Requirement That Checks parRandom
			REQUIREMENT
			{
				name = Check For Activation
				type = Expression
				expression = @/parRandom == 2
			}
		}
		
		PARAMETER
		{
			name = Enter Stable Pre-Re-Entry Orbit 
			type = All
			title = Enter and maintain an curricular orbit at 80 Km  
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit 
			PARAMETER
			{
				name = Enter_Pre_Re_Entry_Orbit  
				type = All
				title = Achieve Correct Final Orbital Parameters.
				disableOnStateChange = false
				
				PARAMETER
				{
					name = Circle Check  
					type = Orbit
					title = Enter circular orbit at 80 Km 
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minAltitude = (800000-(@/errorAlt))
					maxAltitude = (800000+(@/errorAlt))
				}
				
				PARAMETER
				{
					name = Inclination Check  
					type = Orbit
					title = Enter orbit with inclination of 0
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minInclination = (180-(@/errorInc))
					maxInclination = (0+(@/errorInc))
				}
			}
			
			//Wait for 30 min. Assume last minute checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit that meets the requirements
				waitingText = Maintain orbit while checks are completed.
				completionText = All systems are go for re-entry.
				parameter = Enter_Pre_Re_Entry_Orbit  
			}
		}
		
		PARAMETER
		{
			name = landedSafe
			type = All
			title = Land or Splashdown Safely On Kerbin
			disableOnStateChange = false
			completeInSequence = true
			
			PARAMETER
			{
				name = Landed 
				type = ReachState
				hidden = true
				completeInSequence = true				
				targetBody = HomeWorld()
				situation = LANDED
				
				REQUIREMENT
				{
					name = Land
					type = Expression
					expression = biome != Shores && biome != Water
				}
			}
			
			PARAMETER
			{
				name = Splashed Down
				type = ReachState
				hidden = true
				completeInSequence = true				
				targetBody = HomeWorld()
				situation = SPLASHED

				REQUIREMENT
				{
					name = Splashdown
					type = Expression
					expression = biome == Shores && biome == Water
				}
			}
			
			PARAMETER
			{	
				name = finalCrew
				type = HasCrew
				title = Have @/trainee and @/mentor onboard when you land
				kerbal = @/trainee
				kerbal = @/mentor
			}
		}
		
		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			parameter = landedSafe
			kerbal = @/trainee
			experience = @/expAward
		}
		

			