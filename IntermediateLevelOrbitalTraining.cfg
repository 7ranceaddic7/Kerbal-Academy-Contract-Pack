 CONTRACT_TYPE
    { //Define Contract Information / Displayed Information
        name = IntermediateOrbitalPilotTraining
        title = Kerbal Academy: Intermediate Level Orbital Maneuvering Course
		group = KerbalAcademy
        description = KSC administration has chosen @trainee to complete an intermediate level orbital maneuver training. Completing the course will give @/trainee valuable experience.  
		genericDescription = Have the trainee land safely after achieving the following orbital parameters.
        synopsis = Complete the training with @/trainee.
        completedMessage = Congratulations @/trainee 
        agent = Kerbal Academy
		notes = The parameters must be completed in order.
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Trivial
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = @/trainingCost
		
		//Find Kerbal 
		DATA
		{ 
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel() >2 &&  m.ExperienceLevel() <=4).Random()
			title = Must have a Pilot above Level 2 and below or at level 4 available in the roster. 
		}
		
		// Decide Reward Multipliers 
		DATA
		{	
			type = double
			currentLevel = @/trainee.ExperienceLevel()
			rewardMultiplier = Random(1,3)
			costMultiplier = (@currentLevel)*(@rewardMultiplier)
		}
		
		//Set XP rewards
		DATA
		{
			type = double
			expAward = (@/mentor.ExperienceLevel() - @/trainee.ExperienceLevel())*1.25  
			baseMentorlevel = @/trainee.ExperienceLevel()+1
		}
		
		DATA
		{
			type = List<Kerbal>
			requiredValue = false
			aliveKerbals = AllKerbals().Where(a => a.RosterStatus() == Available || a.RosterStatus() == Assigned)
			mentorList = @aliveKerbals.Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.ExperienceLevel() > @baseMentorlevel)
		}
		
		// Find Mentor
		DATA
		{	
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			mentor = AllKerbals().Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel()>= @baseMentorlevel).Random()
			title = Must have a Pilot at least one level above that of the trainee available in the roster. 
		}
		
		//Set Cost
		DATA
		{ 
			type = double
			trainingCost = (-1000*((@costMultiplier)*(@expAward)))
		}	
		
		//Define Orbital Margins And Randomize
		DATA
		{
			type = double
			errorMulti = @currentLevel < 3 ? 4 : @currentLevel == 3 ? 3 : 2 
			errorAlt = ((@errorMulti)*1000)
			errorInc = ((@errorMulti) / 2)
			errorEcc = ((@errorMulti) / 10)
			errorPer = ((@errorMulti) / 2)
			altRandom = Random(0,25)  
			incRandom = Random(-10,10)
			eccRandom = Random(0.0,0.75)
			perRandom = Random(-10,15)
		}
		
		//Define Target Orbit Parameters
		DATA
		{
			type = double
			target = HomeWorld()
			sit = ORBITING
			basicAlt = (75000+((@altRandom)*1000))  
			minAlt = ((@basicAlt)-(@errorAlt))
			maxAlt = ((@basicAlt)+(@errorAlt))
			basicAp = (100000+((@altRandom)*1000))  
			minAp = ((@basicAp)-(@errorAlt))
			maxAp = ((@basicAp)+(@errorAlt))
			basicPe = (100000-((@altRandom)*1000))
			minPe = ((@basicPe)-(@errorAlt))
			maxPe = ((@basicPe)+(@errorAlt))
			basicEcc = (@eccRandom)
			minEcc = ((@basicEcc)-(@errorEcc))
			maxEcc = ((@basicEcc)+(@errorEcc))
			basicInc = (0+(@incRandom))
			minInc = ((@basicInc)-(@errorInc))
			maxInc = ((@basicInc)+(@errorInc))
			basicPer = (45+(@perRandom))m 
			minPer = ((@basicPer)-(@errorPer))m
			maxPer = (@basicPer)+(@errorPer))m
		}
		
		
		
		

			