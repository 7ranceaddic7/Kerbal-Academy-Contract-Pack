 CONTRACT_TYPE
    { //Define Contract Information / Displayed Information
        name = AdvancedOrbitalPilotTraining
        title = Kerbal Academy: Advanced Level Orbital Maneuvering Course
		group = KerbalAcademy
        description = KSC administration has chosen @trainee to complete an advanced level orbital maneuver training. Working on their own will provide valuable experience.   
		genericDescription = Have the trainee land safely after achieving the following orbital parameters.
        synopsis = Complete the training with @/trainee.
        completedMessage = Congratulations @/trainee 
        agent = Kerbal Academy
		notes = The parameters must be completed in order.
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Exceptional
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = @/trainingCost
		
		//Find Kerbal 
		DATA
		{ 
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel() >=4).Random()
			title = Must have a Pilot at or above Level 4 available in the roster. 
		}
		
		// Decide Reward Multipliers 
		DATA
		{	
			type = double
			currentLevel = @/trainee.ExperienceLevel()
			rewardMultiplier = Random(1,3)
			expMultiplier = @currentLevel == 4 ? 7 : 9
			costMultiplier = (@currentLevel)*(@rewardMultiplier)
		}
		
		//Set XP rewards
		DATA
		{
			type = double
			expAward = (@expMultiplier)*(@rewardMultiplier) 
		}
		
		//Set Cost
		DATA
		{ 
			type = double
			trainingCost = (-1400*((@costMultiplier)*(@expAward)))
		}	
		
		//Define Orbital Margins And Randomize
		DATA
		{
			type = double
			parRandom = Random(1,2)
			errorMulti = @currentLevel == 3 ? 3 : 2 
			errorAlt = ((@errorMulti)*1000)
			errorInc = ((@errorMulti) / 2)
			altRandom = Random(0,10)  
			incRandom = Random(4,10)
		}
		
		//Pick Target Body
		DATA
		{
			type = CelestialBody
			targetMoon = [ Mun , Minmus ].Random()
			hidden = true
		}
		
		//Define Target Orbit Parameters
		DATA
		{
			type = double
			loworbitSafe = @targetMoon == Mun ? 35000 : 25000 
			basicAlt = ((@loworbitSafe)+((@altRandom)*1200))  
			minAlt = ((@basicAlt)-(@errorAlt))
			maxAlt = ((@basicAlt)+(@errorAlt))
			basicAp = ((@loworbitSafe)+((@altRandom)*1000))  
			minAp = ((@basicAp)-(@errorAlt))
			maxAp = ((@basicAp)+(@errorAlt))
			basicPe = ((@loworbitSafe)-((@altRandom)*1000))
			minPe = ((@basicPe)-(@errorAlt))
			maxPe = ((@basicPe)+(@errorAlt))
			basicInc = (0+(@incRandom))
			minInc = ((@basicInc)-(@errorInc))
			maxInc = ((@basicInc)+(@errorInc))
		}
		
		//Parameters
		//Check that everyone is onboard for launch
		PARAMETER
		{
			name = Inital Crew Check
			type = All
			title = Have @/trainee on board before launch.
			disableOnStateChange = true
			
			//Parameters checking each crew memeber 
			PARAMETER
			{
				name = Check Trainee
				type = HasCrew
				kerbal = @/trainee
				title = Have @/trainee on board.
				disableOnStateChange = true
			}

			//Are you landed tho?
			PARAMETER
			{
				name = Check Prelaunch
				type = ReachState
				hidden = true
				targetBody = HomeWorld()
				situation = PRELAUNCH
				disableOnStateChange = true
			}
		}
		
		//Enter first safe stable orbit
		PARAMETER
		{
			name = Enter Orbit Safely
			type = All
			title = Enter a stable orbit with a periapsis above 75 Km, and hold for 30 Min before continuing.
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit Ap & Pe aboive 75000 meters (75 Km)
			PARAMETER
			{
				name = Enter_Orbit 
				type = Orbit
				title = Enter an orbit with a periapsis above 75 Km.
				disableOnStateChange = false
				targetBody = HomeWorld()
				situation = ORBITING
				minAltitude = 75000
			}
			
			//Wait for 30 min. Assume premission checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit with a periapsis above 75 Km.
				waitingText = Maintain a stable orbit while pre-mission checks are completed.
				completionText = All systems are go for next phase.
				parameter = Enter_Orbit
			}
		}
		
		//Transfer to target body
		PARAMETER
		{
			name = Transfer to target
			type = All
			title = Transfer to @/targetMoon. Then enter a stable orbit with a periapsis above @/loworbitSafe meters, and hold for 30 Min before continuing.
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit Ap & Pe above safe level
			PARAMETER
			{
				name = Enter_Orbit 
				type = Orbit
				title = Enter an orbit with a periapsis above @/loworbitSafe meters.
				disableOnStateChange = false
				targetBody = @/targetMoon
				situation = ORBITING
				minAltitude = @/loworbitSafe
			}
			
			//Wait for 30 min. Assume premission checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit with a periapsis above @/loworbitSafe .
				waitingText = Maintain a stable orbit while checks are completed.
				completionText = All systems are go for next phase.
				parameter = Enter_Orbit
			}
		}
		
		//Orbit Moon Group 
		PARAMETER
		{
			name = First Orbit Maneuver Practice 
			type = All
			title = Enter and maintain an orbit that meets the first set of parameters. 
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit 
			PARAMETER
			{
				name = Enter_First_Practice_Orbit  
				type = All
				title = Achieve Correct Orbital Parameters.
				disableOnStateChange = false
				
				PARAMETER
				{
					name = Apoapsis Check  
					type = Orbit
					title = Enter orbit with an apoapsis of @/basicAp
					disableOnStateChange = false
					targetBody = @/targetMoon
					situation = ORBITING
					minApA = @/minAp
					maxApA = @/maxAp
				}
				
				PARAMETER
				{
					name = Periapsis Check  
					type = Orbit
					title = Enter orbit with periapsis of @/basicPe
					disableOnStateChange = false
					targetBody = @/targetMoon
					situation = ORBITING
					minPeA = @/minPe
					maxPeA = @/maxPe
				}
				
				PARAMETER
				{
					name = Inclination Check  
					type = Orbit
					title = Enter orbit with inclination of @/basicInc
					disableOnStateChange = false
					targetBody = @/targetMoon
					situation = ORBITING
					minInclination = @/minInc
					maxInclination = @/maxInc
				}
			}
			
			//Wait for 30 min. Assume pre-mission checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit that meets the requirements
				waitingText = Maintain orbit while checks are completed.
				completionText = All systems are go for next phase.
				parameter = Enter_First_Practice_Orbit
			}
		}
		
		//Second Orbit Moon Group
		PARAMETER
		{
			name = Second Orbit Maneuver Practice 
			type = All
			title = Enter and maintain An orbit that meets the second set of parameters. 
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit 
			PARAMETER
			{
				name = Enter_Second_Practice_Orbit  
				type = All
				title = Achieve Correct Orbital Parameters.
				disableOnStateChange = false
				
				PARAMETER
				{
					name = Circle Check  
					type = Orbit
					title = Enter circular orbit at 
					disableOnStateChange = false
					targetBody = @/targetMoon
					situation = ORBITING
					minAltitude = @/minAlt
					maxAltitude = 2/maxAlt
				}
				
				PARAMETER
				{
					name = Inclination Check  
					type = Orbit
					title = Enter orbit with inclination of 0
					disableOnStateChange = false
					targetBody = @/targetMoon
					situation = ORBITING
					minInclination = (180-(@/errorInc))
					maxInclination = (0+(@/errorInc))
				}
			}
			
			//Wait for 30 min. Assume pre-mission checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit that meets the requirements
				waitingText = Maintain orbit while checks are completed.
				completionText = All systems are go for next phase.
				parameter = Enter_Second_Practice_Orbit
			}
		}
		
		PARAMETER
		{
			name = Enter Stable Pre-Re-Entry Orbit Around HomeWorld()
			type = All
			title = Transfer back to HomeWorld(). Then enter and maintain a curricular orbit at 80 Km  
			completeInSequence = true
			disableOnStateChange = true
			
			//Check for correct orbit 
			PARAMETER
			{
				name = Enter_Pre_Re_Entry_Orbit  
				type = All
				title = Achieve Correct Final Orbital Parameters.
				disableOnStateChange = false
				
				PARAMETER
				{
					name = Circle Check  
					type = Orbit
					title = Enter circular orbit at 80 Km 
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minAltitude = (800000-(@/errorAlt))
					maxAltitude = (800000+(@/errorAlt))
				}
				
				PARAMETER
				{
					name = Inclination Check  
					type = Orbit
					title = Enter orbit with inclination of 0
					disableOnStateChange = false
					targetBody = HomeWorld()
					situation = ORBITING
					minInclination = (180-(@/errorInc))
					maxInclination = (0+(@/errorInc))
				}
			}
			
			//Wait for 30 min. Assume last minute checks or something	
			PARAMETER
			{
				name = Duration
				type = Duration		
				duration = 30m
				preWaitText = Reach an orbit that meets the requirements
				waitingText = Maintain orbit while checks are completed.
				completionText = All systems are go for re-entry.
				parameter = Enter_Pre_Re_Entry_Orbit  
			}
		}
		
		PARAMETER
		{
			name = landedSafe
			type = All
			title = Land or Splashdown Safely On Kerbin
			disableOnStateChange = false
			completeInSequence = true
			
			PARAMETER
			{
				name = Landed 
				type = ReachState
				hidden = true
				completeInSequence = true				
				targetBody = HomeWorld()
				situation = LANDED
				
				REQUIREMENT
				{
					name = Land
					type = Expression
					expression = biome != Shores && biome != Water
				}
			}
			
			PARAMETER
			{
				name = Splashed Down
				type = ReachState
				hidden = true
				completeInSequence = true				
				targetBody = HomeWorld()
				situation = SPLASHED

				REQUIREMENT
				{
					name = Splashdown
					type = Expression
					expression = biome == Shores && biome == Water
				}
			}
			
			//Final Crew Check
			PARAMETER
			{
				name = Final Crew Check
				type = All
				title = Have @/trainee on board on landing.
				completeInSequence = true
				disableOnStateChange = true
			
				//Parameters checking each crew memeber 
				PARAMETER
				{
					name = Check Trainee
					type = HasCrew
					kerbal = @/trainee
					title = Have @/trainee on board.
					completeInSequence = true
					disableOnStateChange = true
				}
			}
		}
		
		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			parameter = landedSafe
			kerbal = @/trainee
			experience = @/expAward
		}
		

			